I tested my program with various different txt files. 
Several of which account for boundary conditions:

- testdocempty.txt tests for an empty txt file as input. If the scanner cannot find .hasNext, the
program should return an error message to the console that the file is empty. The program assumes 
that other than an empty txt file, all other files will at least have a header, and if there are
any columns, there will be 3. Therefore, any other format will cause the program to fail.

- testdoc101lines.txt tests for a full TextTable array, making sure that a full txt file 
will load into the array properly. I also used this file to ensure that a user cannot add more than 
100 rows to the array, using the addRow function, after the table was originally loaded in. The
Program should display an error message that the table is full and not add the row.

- testdoc105lines.txt tests to make sure a user cannot add in more than 101 lines during an initial
load in of a txt file. If a user tries to load in more than 101 lines, the program should
print an error statement that the table is full. I also checked that the first 101 lines would be
loaded into the array properly.

- testdocspacing.txt tests for sparatic spacing and different sizes of integer/float values to make 
sure that the program can read in comma separated txt files with different spacing and that 
the output will remove extra whitespace.

- testdocjustheader.txt tests that the program will load in a txt file with only the header and no
rows. A user can then add rows to the array with addRow and saveTable will show added rows.

- testtable.txt is the original testing table, which has no spacing between columns.

- testdocwow.txt is another txt document that tests for fairly normal table conditions.

I used testtable.txt and testdocwow.txt to test what would happen if a user loaded in one txt file 
and then tried to load in another while the array was not full. Originally, this would work. The 
tableHeader variable would be updated to the second txt file and the two tables would be combined
in the array and in the output if the user did saveTableToFile. I added an if check to my program 
so othat only one txt file can be loaded in at a time by checking if the tableHeader variable is null. 
This prevents a user from accidently loading in 2 different txt files into the array. However, if 
that was the users intention, they won't be able to combine 2 txt files and instead would have to 
add more rows using addRow.

- the loadTableFromFile function was configured to only work with comma separated txt files, using
the String split method, and only works properly with a single headder or three columns if there
are any columns at all. Since this was an assumption of our Assignment 1 instructions, this design 
should be okay. Regardless, the program will not work properly if another format, 
such as spaces or tabs, of txt file is used.

- the removeRow and findRow functions both work by checking the 1 index of the TableRow array which
should be the name. Since we weren't supposed to change Assign1Main, and the dialog box for both
removeRow and findRow in the main method ask the user to input the name in the row, I decided to only 
have the functions check for equality with the name. This doesn't match the assignment instructions for 
removeRow as it mentions entering the integer ID, but this does match the main method. For both 
removeRow and findRow, if the user enters any name (or any value that's stored in the 1 index ) 
that's not in the array, the program will return an error. For removeRow, it will print an error message 
to the console. For find row it will return an error message to the GUI box.

Another bug is that a user can load up the program, and just start adding rows to the table array. I 
left this as is because it didn't seem like the user was required to load in a txt file first. However, 
if a usuer starts up the program and adds single rows using addRow, the output will include "null" for
the header value. The rows will be output correctly, but it does have a null header. 

The final bug, that I'm aware of, is that a user can technically put any value into the program. The
assumption from the instructions are that the table with have a row of integers, a row of string names, 
and a row of floating point numbers. However, if a user does addRow, they could input 3 strings, or 3
floating point numbers, etc. and the program would work as usual. Even though the GUI inputDialog box
asks for a number, name, and value, the user could enter any value and it would be treated as a string. 
I left this because I felt like the Assign1Main should be the only class interacting with the user and
in order to handle bugs like a user inputting the wrong values, I would have to do some GUIs in the 
TextTable class and I felt like that would defeat the separation of concerns. 



